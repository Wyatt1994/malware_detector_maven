package com.wyatt.cache_queue;

import java.util.*;

/**
 * Created by ASUS on 2018/11/28.
 */
public class LFUCache {

    private final int SIZE;

    private Map<Object,ValueCnt> map=new HashMap<>();
    public LFUCache(int size){
        this.SIZE=size;
    }
    public static class ValueCnt implements Comparable{
        private Object value;
        private Object key;
        private int hitcount=0;
        public ValueCnt(Object key,Object value){
            this.key=key;
            this.value=value;
        }


        @Override
        public int compareTo(Object v) {
            if (v instanceof ValueCnt){
                if (this.hitcount>((ValueCnt) v).hitcount){
                    return 1;
                }else {
                    return -1;
                }
            }
            return 0;
        }
    }

    //返回value值
    public Object get(Object key){
        if (key==null){
            return null;
        }
        //命中+1
        map.get(key).hitcount++;
        return map.get(key).value;
    }

    public void put(Object key,Object value){
        //若已存在
        if (map.get(key)!=null){
            map.get(key).hitcount++;
            map.get(key).value=value;
        }else {
            //若已满
            if (map.size()>=SIZE){
                remove();
            }
            ValueCnt value1=new ValueCnt(key,value);
            map.put(key,value1);
        }
    }

    //移除一个元素
    public void remove(){

        ValueCnt v= Collections.min(map.values());
        map.remove(v.key);
    }

    //获取存储情况
    @Override
    public String toString(){
        List<ValueCnt> list=new ArrayList<>();
        list.addAll(map.values());
        Collections.sort(list);
        String result = "";
        for (ValueCnt valueCnt : list) {
            result +=valueCnt.key+"="+valueCnt.value+"  ";
        }
        return result;
    }


}
