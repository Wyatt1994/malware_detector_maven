package com.wyatt;

/**
 * Created by wyatt on 2018/9/1.
 */

import java.io.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.locks.Lock;
import java.util.logging.SimpleFormatter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileUploadException;
import org.apache.commons.fileupload.ProgressListener;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;



public class UploadServlet extends HttpServlet {
    public static String result="";
    public UploadServlet() {
        super();
    }
    public void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        //设置编码

        request.setCharacterEncoding("UTF-8");
        response.setContentType("text/html;charset=UTF-8");
        PrintWriter pw = response.getWriter();
        //设定允许上传文件格式
        String[] fileTypeAllowed={".jpg",".txt",".JPG",".exe"};
        try {
            //设置系统环境
            DiskFileItemFactory factory = new DiskFileItemFactory();
            //文件存储的路径
            //保存在tomcat ROOT里面
            //String storePath = getServletContext().getRealPath("/creatAsm/exeFile");
            //linux保存路径
            String storePath ="/usr/local/tomcat/webapps/malware_detector/creatAsm/exeFile";
            //保存在项目里面
            //String storePath ="E:\\malware_detector_maven\\src\\main\\webapp\\creatAsm\\exeFile";
            //判断传输方式  form  enctype=multipart/form-data
            boolean isMultipart = ServletFileUpload.isMultipartContent(request);
            if(!isMultipart)
            {
                pw.write("传输方式有错误！");
                return;
            }
            ServletFileUpload upload = new ServletFileUpload(factory);
            upload.setFileSizeMax(4*1024*1024);//设置单个文件大小不能超过4M
            upload.setSizeMax(20*1024*1024);//设置总文件上传大小不能超过6M
            //监听上传进度
//            upload.setProgressListener(new ProgressListener() {

            //pBytesRead：当前以读取到的字节数
            //pContentLength：文件的长度
            //pItems:第几项
//                public void update(long pBytesRead, long pContentLength,
//                                   int pItems) {
//                    System.out.println("已读取文件字节 :"+pBytesRead+" 文件总长度："+pContentLength+"   第"+pItems+"项");
//
//                }
//            });
            upload.setHeaderEncoding("UTF-8");
            System.out.print("dsdsd");
            //解析,必须导入common-io包，否则不报错也跑不起来
            List<FileItem> items = upload.parseRequest(request);
            for(FileItem item: items)
            {
                if(item.isFormField())//普通字段，表单提交过来的
                {
                    pw.write("请指定上传文件！");
                    return;
//                    String name = item.getFieldName();
//                    String value = item.getString("UTF-8");
//                    System.out.println(name+"=="+value);
                }else
                {
                    //获取上传文件类型
                    String mimeType = item.getContentType();
//					if(mimeType.startsWith("image")){
                    InputStream in =item.getInputStream();
                    String fileName = item.getName();
                    if(fileName==null || "".equals(fileName.trim()))
                    {
                        continue;
                    }
                    fileName = fileName.substring(fileName.lastIndexOf("\\")+1);
                    String fileSuffix=fileName.substring(fileName.lastIndexOf("."));
                    //fileName = UUID.randomUUID()+"_"+fileName;

                    //判断上传类型是否正确
                    if (!Arrays.asList(fileTypeAllowed).contains(fileSuffix)){

                        pw.write("上传文件格式非法！请重新指定上传文件");
                        return;
                    }
                    //输出上传文件信息
                    System.out.println("上传文件的大小:" + item.getSize()+"B");
                    System.out.println("上传文件的类型:" + item.getContentType());
                    System.out.println("上传文件的名称:" + fileName);
                    //按日期来建文件夹
                    SimpleDateFormat format = new SimpleDateFormat("yyyyMMddHHmmssSSS");

                    String fileName_stored = format.format(new Date())+fileSuffix;


                    String newStorePath = makeStorePath(storePath);
                    //String storeFile = newStorePath+"\\"+fileName_stored;
                    String storeFile = newStorePath+"\\"+fileName_stored;
                    OutputStream out = new FileOutputStream(storeFile);
                    byte[] b = new byte[1024];
                    int len = -1;
                    while((len = in.read(b))!=-1)
                    {
                        out.write(b,0,len);
                    }
                    in.close();
                    out.close();
                    item.delete();//删除临时文件
                    pw.print("上传成功！");
                    pw.close();

                    //runTimeMethod();

                    //System.out.print(result);


                }
            }
//			}
        }catch(org.apache.commons.fileupload.FileUploadBase.FileSizeLimitExceededException e){
            //单个文件超出异常
            pw.write("单个文件不能超过4M");
        }catch(org.apache.commons.fileupload.FileUploadBase.SizeLimitExceededException e){
            //总文件超出异常
            pw.write("总文件不能超过6M");

        }catch (FileUploadException e) {
            e.printStackTrace();
        }
        finally {
            pw.close();
        }


    }

    private String makeStorePath(String storePath) {

        Date date = new Date();
        DateFormat df = DateFormat.getDateInstance(DateFormat.MEDIUM);
        String s = df.format(date);
        String path = storePath+"\\"+s;
        File file = new File(path);
        if(!file.exists())
        {
            file.mkdirs();//创建多级目录，mkdir只创建一级目录
        }
        return path;

    }

    public void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        request.setCharacterEncoding("utf-8");
        response.setContentType("text/html;charset=UTF-8");
        PrintWriter out=response.getWriter();
        String msg=request.getParameter("msg");
        System.out.print(msg);
        while (true){
            if ((result.length()-msg.length())>4){
                msg=result;
                break;
            }else{
                //没有新的数据 保持住连接
                try {
                    Thread.sleep(1000);
                }catch (InterruptedException e){
                    e.printStackTrace();
                }
            }
        }
        out.print(msg);
        out.close();


    }
    public static void runTimeMethod() {
        try {
            String cmd="python E:\\malware_detector\\web\\malwware_detector.py "+"--dae_layers 10000,5000,2500,1000,500,250,100,30  --dae_batch_size 25 --dae_num_epochs 0 --verbose 0 --dae_corr_type masking --dae_corr_frac 0.0 --finetune_num_epochs 0 --finetune_batch_size 32 --finetune_opt gradient_descent --finetune_learning_rate 0.05 --dae_enc_act_func sigmoid --dae_dec_act_func sigmoid --dae_loss_func cross_entropy --finetune_enc_act_func tanh --finetune_dec_act_func sigmoid --finetune_loss_func cross_entropy --dropout 0.7";
            Process pr = Runtime.getRuntime().exec(cmd);
            BufferedReader in = new BufferedReader(new InputStreamReader(
                    pr.getInputStream()));
            String line="";
            result+="正在分析中..."+"<br/><br/>";
            //List<String> out=new ArrayList<>();
//输出打印在控制台上的结果
            while ((line = in.readLine()) != null) {
                if (line.contains("layer")||line.contains("run")||line.contains("="))
                    continue;
                result+=(line+"<br/>");
                System.out.println(line);
            }
//得到打印在控制台上的结果
//            while ((line = in.readLine()) != null) {
//                result+=line;
//            }
            in.close();

            pr.waitFor();
//                 System.out.println("end");
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

}
