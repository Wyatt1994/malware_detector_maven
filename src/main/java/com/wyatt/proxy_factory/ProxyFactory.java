package com.wyatt.proxy_factory;


import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.Stack;
import java.util.TreeMap;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadPoolExecutor;

/**
 * Created by ASUS on 2018/11/21.
 */
public class ProxyFactory {
    private Object target;

    public ProxyFactory(Object target){
        this.target=target;
    }
    public Object getProxyInstanceByDynamicProxy(){

        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), new InvocationHandler() {
            @Override
            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
                System.out.println("代理前");
                Object returnValue=method.invoke(target,args);
                System.out.println("代理后");
                return returnValue;
            }
        });
    }



}
