package com.wyatt.proxy_factory;

import net.sf.cglib.proxy.Enhancer;
import net.sf.cglib.proxy.MethodInterceptor;
import net.sf.cglib.proxy.MethodProxy;

import java.lang.reflect.Method;

/**
 * Created by ASUS on 2018/11/21.
 */
public class ProxyFactory2 implements MethodInterceptor{
    private Object target;

    public ProxyFactory2(Object target){
        this.target=target;
    }
    public Object getProxyInstanceByCglib(){
        //工具类
        Enhancer en=new Enhancer();
        //设置父类
        en.setSuperclass(target.getClass());
        //设置回调函数
        en.setCallback(this);
        //创建子类(即代理对象)
        return en.create();
    }

    @Override
    public Object intercept(Object o, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {
        System.out.println("代理前");
        Object returnValue=method.invoke(target,args);
        System.out.println("代理后");
        return returnValue;
    }
}
