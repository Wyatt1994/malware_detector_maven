package com.wyatt.proxy_factory;


import java.lang.reflect.Proxy;
import java.util.concurrent.*;
import java.util.concurrent.atomic.AtomicInteger;

/**
 * Created by ASUS on 2018/11/21.
 */
public class Main {
    public static void main(String[] args) {
        for (int i = 0; i < 10; i++) {
            System.out.println(new Waiter());
        }
        System.exit(1);

        //jdk动态代理
        TestImpl target=new TestImpl();
        Test proxy=(Test)new ProxyFactory(target).getProxyInstanceByDynamicProxy();
        System.out.println(proxy.getClass());
        proxy.save();

        //Cgilb代理
        Test_Cglib target1=new Test_Cglib();
        Test_Cglib proxy1=(Test_Cglib)new ProxyFactory2(target1).getProxyInstanceByCglib();
        System.out.println(proxy.getClass());
        proxy1.save();
    }



}

class Waiter{
    private static int count = 1;
    private final int id = count++;

    @Override
    public String toString() {
        return "Waiter{" +
                "id=" + id +
                '}';
    }
}

