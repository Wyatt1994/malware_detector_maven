package com.wyatt.learn08;

import java.io.*;
import java.lang.reflect.Field;

/**
 *
 * 使用字节输入输出流inputStream outputstream
 * 以及缓冲流BufferedInputStream实现文件拷贝
 * Created by wyatt on 2018/10/17.
 */

public class TestCopyFile {
    public static void main(String[] args) {
        long t1=System.currentTimeMillis();
        copyFile("1.txt","src/com/wyatt/learn08/copy.txt");
        long t2=System.currentTimeMillis();
        System.out.println(t2-t1);
    }
    public static void copyFile(String srcPath,String dstPath){
        File src=new File(srcPath);
        File dst=new File(dstPath);
        InputStream is=null;
        OutputStream os=null;
        try {
            is=new FileInputStream(src);
            os=new FileOutputStream(dst,true);//默认为false，覆盖
            byte[] flush=new byte[1024];
            int len=-1;
            while ((len=is.read(flush))!=-1){
                os.write(flush,0,len);
            }
            os.flush();
        }catch (FileNotFoundException e){
            e.printStackTrace();
        }catch (IOException e){
            e.printStackTrace();
        }finally {
            //单独分开关闭，先打开的后关闭
            if (os!=null){
                try {
                    os.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (is!=null){
                try {
                    is.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }

        }
    }
    //使用try...with...resource,使用closeable进行统一关闭见FileUtils中的close方法
    //也就是把流的声明和实例化都放在try中，通知系统自动去释放，省去finally中的操作，
    public static void copyFile2(String srcPath,String dstPath){
        File src=new File(srcPath);
        File dst=new File(dstPath);
        try(InputStream is=new FileInputStream(src);OutputStream os=new FileOutputStream(dst,true);) {//默认为false，覆盖
            byte[] flush=new byte[1024];
            int len=-1;
            while ((len=is.read(flush))!=-1){
                os.write(flush,0,len);
            }
            os.flush();
        }catch (FileNotFoundException e){
            e.printStackTrace();
        }catch (IOException e){
            e.printStackTrace();
        }
    }

    //使用缓冲流BufferedInputStream
    public static void copyFileByBuffered(String srcPath,String dstPath){
        File src=new File(srcPath);
        File dst=new File(dstPath);
        try(InputStream is=new BufferedInputStream(new FileInputStream(src));OutputStream os=new BufferedOutputStream(new FileOutputStream(dst,true));) {//默认为false，覆盖
            byte[] flush=new byte[1024];
            int len=-1;
            while ((len=is.read(flush))!=-1){
                os.write(flush,0,len);
            }
            os.flush();
        }catch (FileNotFoundException e){
            e.printStackTrace();
        }catch (IOException e){
            e.printStackTrace();
        }
    }
}
