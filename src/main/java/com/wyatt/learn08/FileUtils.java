package com.wyatt.learn08;

import java.io.*;

/**
 *  封装拷贝
 *  封装释放资源
 * Created by ASUS on 2018/10/18.
 */
public class FileUtils {
    public static void main(String[] args) {
        //文件到文件
        try {
            InputStream is=new FileInputStream("1.txt");
            OutputStream os=new FileOutputStream("1-copy.txt");
            copy(is,os);
        } catch (IOException e) {
            e.printStackTrace();
        }


        byte[] datas=null;
        //文件到字节数组
        try {
            InputStream is=new FileInputStream("1.png");
            ByteArrayOutputStream os=new ByteArrayOutputStream();
            copy(is,os);
            datas=os.toByteArray();
            System.out.println(datas.length);
        } catch (IOException e) {
            e.printStackTrace();
        }


        //字节数组到文件
        try {
            InputStream is=new ByteArrayInputStream(datas);
            OutputStream os=new FileOutputStream("p-copy.png");
            copy(is,os);
        } catch (IOException e) {
            e.printStackTrace();
        }

    }
    public static void copy(InputStream is, OutputStream os){
        try {

            byte[] datas=new byte[1024];
            int len=-1;
            while ((len=is.read(datas))!=-1){
                os.write(datas,0,len);
            }
            os.flush();

        }catch (FileNotFoundException e){
            e.printStackTrace();
        }catch (IOException e){
            e.printStackTrace();
        }finally {
                close(is,os);
            }

    }

    //封装释放资源方法
//    public static void close(InputStream is,OutputStream os){
//        try {
//            if (os!=null) {
//                os.close();
//            }
//        }catch (IOException e) {
//            e.printStackTrace();
//        }
//        try {
//            if (is!=null){
//                is.close();
//            }
//        }catch (IOException e){
//            e.printStackTrace();
//        }
//    }

    //用于统一关闭多个流
    //因为输入输出流都实现的是closeable接口，因此可以再封装
    //...表示可变参数，简单可以理解为数组
    public static void close(Closeable... ios){
        for (Closeable io:ios){
            try {
                if (io!=null){
                    io.close();
                }
            }catch (IOException e){
                e.printStackTrace();
            }
        }
    }

}
