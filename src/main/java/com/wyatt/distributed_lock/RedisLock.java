package com.wyatt.distributed_lock;

import com.sun.org.apache.regexp.internal.RE;
import redis.clients.jedis.Jedis;

import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;

/**
 * Created by ASUS on 2018/11/27.
 */
public class RedisLock implements Lock {
    private static String LOCK_NAME="LOCK";
    private static String REQUEST_ID="redislock";

    //解决多线程并发问题
    ThreadLocal<Jedis> jedis=new ThreadLocal<>();
    @Override
    public void lock() {
        if (jedis.get()==null){
            jedis.set(new Jedis("192.168.175.132", 6379));
        }

        while (true){
            if (tryLock()){
                //PX表示过期时间单位，毫秒，NX表示为setnx
                jedis.get().set(LOCK_NAME,REQUEST_ID,"NX","PX",3000);
                System.out.println(Thread.currentThread().getName()+"获取锁");
                return;
            }else {
                System.out.println("等待锁");
            }
        }
    }

    @Override
    public void lockInterruptibly() throws InterruptedException {

    }

    @Override
    public boolean tryLock() {
        Long value=jedis.get().setnx(LOCK_NAME,REQUEST_ID);
        //若返回值为1，则代表创建成功
        if (value==1){
            return true;
        }else {
            return false;
        }
    }

    @Override
    public boolean tryLock(long time, TimeUnit unit) throws InterruptedException {
        return false;
    }

    @Override
    public void unlock() {
        //会有同步问题，即线程在解锁时挂掉
        String value=jedis.get().get(LOCK_NAME);
        if (value.equals(REQUEST_ID)){
            jedis.get().del(LOCK_NAME);
        }
    }

    @Override
    public Condition newCondition() {
        return null;
    }
}
