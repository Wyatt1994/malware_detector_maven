package com.wyatt.distributed_lock;

import com.sun.org.apache.bcel.internal.generic.NEW;
import org.apache.zookeeper.*;
import org.apache.zookeeper.data.Stat;
import org.apache.zookeeper.server.ServerCnxnFactory;
import org.omg.PortableServer.THREAD_POLICY_ID;

import java.io.IOException;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;

/**
 * Created by ASUS on 2018/11/27.
 */
public class ZookeeperLock implements Lock {

    private static String LOCK_NAME="/LOCK";
    ThreadLocal<ZooKeeper> zk=new ThreadLocal<>();
    private ThreadLocal<String> CURRENT_LOCK=new ThreadLocal<>();

    private void init(){
        if (zk.get()==null){
            try {
                zk.set(new ZooKeeper("192.168.175.132:2181", 5000, new Watcher() {
                    @Override
                    public void process(WatchedEvent watchedEvent) {

                    }
                }));
                Stat stat=zk.get().exists(LOCK_NAME,false);
                if (stat==null){
                    zk.get().create(LOCK_NAME,new byte[0],ZooDefs.Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);
                }
            } catch (IOException e) {
                e.printStackTrace();
            } catch (InterruptedException e) {
                e.printStackTrace();
            } catch (KeeperException e) {
                e.printStackTrace();
            }
        }
    }
    @Override
    public void lock() {
        //zk为空则创建连接和临时节点
        init();

        if (tryLock()){
            System.out.println(Thread.currentThread().getName()+"获取到锁");
        }

    }

    @Override
    public void lockInterruptibly() throws InterruptedException {

    }

    @Override
    public boolean tryLock() {
        String nodeName=LOCK_NAME+"/zk_";
        try {
            //设置当前CURRENT_LOCK的值，zk.get().create()方法会返回创建的路径名+节点名
            CURRENT_LOCK.set(zk.get().create(nodeName,new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL));
            List<String> nodeList=zk.get().getChildren(LOCK_NAME,false);
            Collections.sort(nodeList);
            System.out.println(nodeList);
            String minNode=nodeList.get(0);

            System.out.println(Thread.currentThread().getName()+"当前节点的锁为"+CURRENT_LOCK.get());
            //默认选择节点值最小获得锁
            //例如[zk_0000000000, zk_0000000001, zk_0000000002, zk_0000000003]，则zk_00000000对应的节点获取锁

            if (CURRENT_LOCK.get().equals(LOCK_NAME+"/"+minNode)){
                return true;
            }else {
                //等待锁
                System.out.println(Thread.currentThread().getName()+"等待锁");
                //监听该节点的前一个节点，即索引值-1
                String preNode=nodeList.get(nodeList.indexOf(CURRENT_LOCK.get().substring(CURRENT_LOCK.get().lastIndexOf("/")+1))-1);

                final CountDownLatch countDownLatch=new CountDownLatch(1);
                Stat preExist=zk.get().exists(LOCK_NAME + "/" + preNode, new Watcher() {
                    @Override
                    public void process(WatchedEvent watchedEvent) {
                        //监听到前一个节点被删除，则唤醒
                        if (Event.EventType.NodeDeleted.equals(watchedEvent.getType())){
                            countDownLatch.countDown();
                            System.out.println(Thread.currentThread().getName()+"被唤醒");
                        }
                    }
                });
                if (preExist!=null){
                    countDownLatch.await();
                }


            }

        }catch (Exception e){
            e.printStackTrace();
        }
        return true;
    }

    @Override
    public boolean tryLock(long time, TimeUnit unit) throws InterruptedException {
        return false;
    }

    @Override
    public void unlock() {
        try {
            zk.get().close();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    @Override
    public Condition newCondition() {
        return null;
    }
}
