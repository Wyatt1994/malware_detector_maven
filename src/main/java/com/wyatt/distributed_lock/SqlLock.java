package com.wyatt.distributed_lock;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.javassist.compiler.ast.Pair;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.Reader;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;

/**
 * Created by ASUS on 2018/11/27.
 */
public class SqlLock implements Lock {
    public static SqlSession session;
    private static String LOCK_NAME="LOCK";
    static{
        try {
            Reader reader= Resources.getResourceAsReader("mybatis-config.xml");
            SqlSessionFactory sqlSessionFactory=new SqlSessionFactoryBuilder().build(reader);
            sqlSessionFactory.getConfiguration().addMapper(LockMapper.class);
            //必须设定为事务手动提交
            session=sqlSessionFactory.openSession(false);
        }catch (Exception e){
            e.printStackTrace();
        }
    }
    @Override
    public void lock() {
        if (tryLock()){
            System.out.println("已获取锁");

        }
    }

    @Override
    public void lockInterruptibly() throws InterruptedException {

    }

    @Override
    public boolean tryLock() {
        LockMapper mapper=session.getMapper(LockMapper.class);
        mapper.getForUpdate(LOCK_NAME);

        return true;


    }

    @Override
    public boolean tryLock(long time, TimeUnit unit) throws InterruptedException {
        return false;
    }

    @Override
    public void unlock() {
        session.commit();
    }

    @Override
    public Condition newCondition() {
        return null;
    }
}
