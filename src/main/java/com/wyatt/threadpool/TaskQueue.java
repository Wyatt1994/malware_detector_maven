package com.wyatt.threadpool;

import java.util.Iterator;
import java.util.LinkedList;
import java.util.Queue;

/**
 * Created by ASUS on 2018/11/11.
 */
public class TaskQueue {

    private Queue<Task> taskQueue=new LinkedList();


    //添加任务
    public synchronized void addTask(Task task){
        if (task!=null){
            taskQueue.add(task);
        }
    }

    //删除任务
    public synchronized void finishTask(Task task){
        if (task!=null){
            task.setState(Task.State.FINISHED);
            taskQueue.remove(task);
        }
    }

    //用于线程获取一个必须为NEW状态的任务
    public synchronized Task getTask(){
        Iterator<Task> iter=taskQueue.iterator();
        while (iter.hasNext()){
            Task task=iter.next();
            if (task.getState().equals(Task.State.NEW)){
                //将其运行状态设置为RUNNING
                task.setState(Task.State.RUNNING);
                return task;
            }
        }
        return null;
    }

    //获取队列中的任务数
    public int getTaskCount(){
        return taskQueue.size();
    }


}
