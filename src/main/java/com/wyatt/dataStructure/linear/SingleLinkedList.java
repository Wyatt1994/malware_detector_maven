package com.wyatt.dataStructure.linear;

/**
 * Created by ASUS on 2018/10/20.
 */
public class SingleLinkedList implements List {
    private Node head=new Node();//头结点
    
    private int size;//节点总数
    
    
    
    
    
    @Override
    public int size() {
        return size;
    }

    @Override
    public Object get(int i) {
        return getNode(i).data;
    }
    public Node getNode(int i) {
        Node node=head;
        for (int j = 0; j <=i; j++) {
            node=node.next;
        }
        return node;
    }
        
    
    @Override
    public boolean isEmpty() {
        return size==0;
    }

    @Override
    public boolean contains(Object e) {
        return false;
    }

    @Override
    public int indexOf(Object e) {
        return 0;
    }

    @Override
    public void add(int i, Object e) {
        if (i<0||i>size){
            throw new MyArrayIndexOutOfBoundsException("索引越界异常");
        }
        //先找到前一个节点
        Node pre=null;
        if (i==0){
            pre=head;
        }else{
            pre=getNode(i-1);
        }
        Node newNode=new Node(e);
        newNode.next=pre.next;
        pre.next=newNode;
        size++;


    }

    @Override
    public void add(Object e) {
        this.add(size,e);
    }

    @Override
    public boolean addBefore(Object obj, Object e) {
        return false;
    }

    @Override
    public boolean addAfter(Object obj, Object e) {
        return false;
    }

    @Override
    public Object remove(int i) {
        if (i<0||i>size){
            throw new MyArrayIndexOutOfBoundsException("索引越界异常");
        }
        //删除节点的前一个节点
        Node pre=null;
        if (i==0){
            pre=head;
        }else{
            pre=getNode(i-1);
        }
        pre.next=pre.next.next;
        size--;
        return null;
    }

    @Override
    public boolean remove(Object e) {
        return false;
    }

    @Override
    public Object replace(int i, Object e) {
        return null;
    }

    @Override
    public String toString() {
        if(size == 0){
            return "[]";
        }
        StringBuilder builder = new StringBuilder("[");
        Node p=head.next;
        for(int i=0;i<size;i++){
            if(i !=size -1){
                builder.append(p.data+",");
            }else{
                builder.append(p.data);
            }
            p=p.next;

        }
        builder.append("]");
        return builder.toString();
    }

    //翻转链表


    @Override
    public Object reverse() {
        head.next=reverse(head.next);
        return head;
    }

    //遍历法：
    /**
     * 1.重新确定第一个节点
     * 2.记录前一个节点和当前节点以及下一个节点
     * 3.若只有一个节点，则第一个节点为当前节点
     */
    public Node reverse(Node node){

        Node first=null;
        Node current=node;
        Node pre=null;
        while (current!=null){
            //重新确定第一个节点
            Node next=current.next;
            if (next==null){
                //可能是只有一个节点，也可能到达最后一个节点，故不能直接退出
                first=current;
            }
            current.next=pre;
            pre=current;
            current=next;
        }
        return first;

    }

    public Node reverseByRecur(Node node){
        if (node==null||node.next==null){
            return node;
        }
        else {
            Node first=reverseByRecur(node.next);
            node.next.next=node;
            node.next=null;
            return first;
        }
    }




}
