package com.wyatt.dataStructure.linear;

import java.util.*;

/**
 * Created by ASUS on 2018/10/20.
 */
public class Stack_Queue {
    public static void main(String[] args) {
        //给定十进制数转换为二进制
        int n=13;
        myLinkStack linkStack=new myLinkStack();
        //商大于0
        int temp=n;
        while (temp>0){
            linkStack.push(temp%2);
            temp=temp/2;
        }
        System.out.println(linkStack.toString());
        System.out.print(n+"--------->");
        while (!linkStack.isEmpty()){
            System.out.print(linkStack.pop());
        }
        System.exit(0);
        myArrStack arr_stack=new myArrStack();
        arr_stack.push(1);
        arr_stack.push(2);
        System.out.println(arr_stack.pop());

        myLinkStack link_stack=new myLinkStack();
        link_stack.push(1);
        link_stack.push(2);
        System.out.println(link_stack.pop());

        myArrQueue arr_queue=new myArrQueue();
        arr_queue.offer(1);
        arr_queue.offer(2);
        System.out.println(arr_queue.poll());

        myLinkQueue link_queue=new myLinkQueue();
        link_queue.offer(1);
        link_queue.offer(2);
        System.out.println(link_queue.poll());
    }

}

//数组实现栈
class myArrStack<E>{
    private Deque<E> stack=new ArrayDeque<>();
    //入栈
    public void push(E e){
        stack.addFirst(e);
    }
    //出栈
    public E pop(){
        return stack.removeFirst();
    }
    //获取栈顶元素，不删除
    public E peek(){
        return stack.peekFirst();
    }
    @Override
    public String toString(){
        return stack.toString();
    }
}

//单向链表实现栈
class myLinkStack<E>{
    private Deque<E> stack=new LinkedList<>();
    //入栈，加到链表的头部
    public void push(E e){
        stack.addFirst(e);
    }
    //出栈，从头结点依次出栈
    public E pop(){
        return stack.removeFirst();
    }
    //选取头结点
    public E peek(){
        return stack.peekFirst();
    }
    public boolean isEmpty(){
        return stack.isEmpty();
    }
    @Override
    public String toString(){
        return stack.toString();
    }
}

//数组实现队列
class myArrQueue<E>{
    private Deque<E> queue=new ArrayDeque<>();
    public void offer(E e){
        //queue.addLast(e);
        queue.offer(e);
    }
    public E poll(){
        //return queue.removeFirst();
        return queue.poll();
    }
    public E peek(){
        return queue.peek();
    }
    @Override
    public String toString(){
        return queue.toString();
    }
}

//单向链表实现队列
class myLinkQueue<E>{
    private Deque<E> queue=new LinkedList<>();
    public void offer(E e){
        //queue.addLast(e);
        queue.offer(e);
    }
    public E poll(){
        //return queue.removeFirst();
        return queue.poll();
    }
    public E peek(){
        return queue.peek();
    }
    @Override
    public String toString(){
        return queue.toString();
    }
}

