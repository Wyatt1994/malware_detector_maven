package com.wyatt.redis_test;

import org.junit.Test;
import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPool;
import redis.clients.jedis.Transaction;

import java.util.*;

/**
 * Created by ASUS on 2018/11/3.
 */
public class TestRedis {

    private static Jedis jedis=new Jedis("192.168.175.132", 6380);

    public  static Jedis getJedis(){
        return jedis;
    }



    @Test
    public void test(){
        System.out.println(getJedis().ping());
    }
    /**
     * 五种基本数据类型 String list set hash zset
     */
    @Test
    public void testSimpleRedis() {
        Jedis jedis = getJedis();
        jedis.set("k1", "v1");
        jedis.hset("map", "name", "wyatt");
        System.out.println(jedis.hget("map", "name"));


        //key
        Set<String> keys = jedis.keys("*");
        for(Iterator iterator = keys.iterator(); iterator.hasNext();) {
            String key = (String) iterator.next();
            System.out.println(key);
            }
        System.out.println("jedis.exists====>"+jedis.exists("k2"));
        System.out.println(jedis.ttl("k1"));
        //String
        //jedis.append("k1","myreids");
        System.out.println(jedis.get("k1"));
        jedis.set("k4","k4_redis");
        System.out.println("----------------------------------------");
        jedis.mset("str1","v1","str2","v2","str3","v3");
        System.out.println(jedis.mget("str1","str2","str3"));
        //list
        System.out.println("----------------------------------------");
        //jedis.lpush("mylist","v1","v2","v3","v4","v5");
        List<String> list = jedis.lrange("mylist",0,-1);
        for(String element : list) {
            System.out.println(element);
            }
        //set
        jedis.sadd("orders","jd001");
        jedis.sadd("orders","jd002");
        jedis.sadd("orders","jd003");
        Set<String> set1 = jedis.smembers("orders");
        for(Iterator iterator = set1.iterator(); iterator.hasNext();) {
            String string = (String) iterator.next();
            System.out.println(string);
            }
        jedis.srem("orders","jd002");
        System.out.println(jedis.smembers("orders").size());
        //hash
        jedis.hset("hash1","userName","lisi");
        System.out.println(jedis.hget("hash1","userName"));
        Map<String,String> map = new HashMap<String,String>();
        map.put("telphone","13811814763");
        map.put("address","atguigu");
        map.put("email","abc@163.com");
        jedis.hmset("hash2",map);
        List<String> result = jedis.hmget("hash2","telphone","email");
        for(String element : result) {
            System.out.println(element);
            }
        //zset
        jedis.zadd("zset01",60d,"v1");
        jedis.zadd("zset01",70d,"v2");
        jedis.zadd("zset01",80d,"v3");
        jedis.zadd("zset01",90d,"v4");
        Set<String> s1 = jedis.zrange("zset01",0,-1);
        for(Iterator iterator = s1.iterator(); iterator.hasNext();) {
            String string = (String) iterator.next();
            System.out.println(string);
        }

    }

    /**
     * 测试事务
     */
    @Test
    public void TestTransaction(){
        Jedis jedis=getJedis();
        Transaction transaction=jedis.multi();
        transaction.set("k4","v4");
        transaction.set("k5","v5");

        //执行
        transaction.exec();
        //放弃
        //transaction.discard();
        boolean retValue=transMethod();
        System.out.println("执行结果："+retValue);
    }
    /**
        * 通俗点讲，watch命令就是标记一个键，如果标记了一个键， 在提交事务前如果该键被别人修改过，那事务就会失败，这种情况通常可以在程序中
        * 重新再尝试一次。
        * 首先标记了键balance，然后检查余额是否足够，不足就取消标记，并不做扣减； 足够的话，就启动事务进行更新操作，
        * 如果在此期间键balance被其它人修改， 那在提交事务（执行exec）时就会报错， 程序中通常可以捕获这类错误再重新执行一次，直到成功。
        */
    //事务具体方法
    public static boolean transMethod(){
        Jedis jedis = getJedis();
        int balance;// 可用余额
        int debt;// 欠额
        int amtToSubtract = 10;// 实刷额度


        jedis.watch("balance");

        //jedis.set("balance","5");
        balance = Integer.parseInt(jedis.get("balance"));
        System.out.println("监控balance当前值为"+balance);
        try {
            Thread.sleep(5000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        if(balance < amtToSubtract) {
            jedis.unwatch();
            System.out.println("余额不足，执行失败");
            return false;
        } else {
            System.out.println("开启事务...transaction");
            Transaction transaction = jedis.multi();
            transaction.decrBy("balance", amtToSubtract);
            transaction.incrBy("debt", amtToSubtract);
            List<Object> result=transaction.exec();
            if (result.isEmpty()){
                System.out.println("事务中被非法更改，执行失败");
                return false;
            }
            balance = Integer.parseInt(jedis.get("balance"));
            debt = Integer.parseInt(jedis.get("debt"));


            System.out.println("余额" + balance);
            System.out.println("负债" + debt);
            return true;
            }
        }


    /**
     * 测试主从复制
     */

    @Test
    public void testMaster_Slave() throws InterruptedException {
        Jedis master=new Jedis("192.168.175.132", 6380);
        Jedis slave=new Jedis("192.168.175.132", 6381);

        slave.slaveof("192.168.175.132", 6380);

        master.set("k2","v2");
        //避免主从复制未完成，需要等待
        Thread.sleep(500);
        System.out.println(slave.get("k2"));
    }



    //测试jedispool连接池
    @Test
    public void testJedisPool(){
        JedisPool jedisPool=JedisPool_Singleton.getJedisPoolInstance();
//        JedisPool jedisPool2=JedisPool_Singleton.getJedisPoolInstance();
//        System.out.println(jedisPool==jedisPool2);
        Jedis jedis=null;
        try {
            jedis=jedisPool.getResource();

            jedis.set("aa","bb");
        }catch (Exception e){
            e.printStackTrace();
        }finally {
            JedisPool_Singleton.release(jedisPool,jedis);
        }
    }




}
