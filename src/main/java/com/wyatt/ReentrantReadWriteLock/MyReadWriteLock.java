package com.wyatt.ReentrantReadWriteLock;

/**
 * Created by ASUS on 2018/11/16.
 */
public class MyReadWriteLock {
    private int readcount=0;
    private int writecount=0;

    public void lockread() throws InterruptedException {
        while (writecount>0) {
            synchronized (this) {
                this.wait();
            }
        }
        readcount++;
        System.out.println("读取操作");

    }

    public void unlockread(){
        readcount--;
        synchronized (this) {
            this.notifyAll();
        }
        System.out.println("释放读锁");
    }

    public void lockwrite() throws InterruptedException {
        while (writecount>0){
            synchronized (this){
                this.wait();
            }
        }

        //写操作提前占坑，减少大量读操作导致的饥饿等待，
        writecount++;
        while (readcount>0){
            synchronized (this){
                this.wait();
            }
        }
        System.out.println("写入操作");

    }

    public void unlockwrite(){

        writecount--;
        synchronized (this) {
            this.notifyAll();
        }

        System.out.println("释放读锁");

    }
}
