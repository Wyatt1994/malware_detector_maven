package com.wyatt.ReentrantReadWriteLock;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Vector;
import java.util.concurrent.*;
import java.util.concurrent.locks.ReentrantLock;

/**
 * Created by ASUS on 2018/11/16.
 */
public class Test_MyReadWriteLock {
    private static CountDownLatch countDownLatch=new CountDownLatch(7);

    public static void main(String[] args) throws InterruptedException {
        MyReadWriteLock readWriteLock=new MyReadWriteLock();


        List<Thread_Read> thread_reads=new ArrayList<>();
        List<Thread_Write> thread_writes=new ArrayList<>();


        for (int i = 0; i < 5; i++) {
            thread_reads.add(new Thread_Read(i,readWriteLock));
            countDownLatch.countDown();

        }

        for (int j = 0; j < 2; j++) {
            thread_writes.add(new Thread_Write(j,readWriteLock));
            countDownLatch.countDown();
        }

        countDownLatch.await();
        for(Thread_Read reads:thread_reads){

            reads.start();
        }
        for(Thread_Write writes:thread_writes){
            writes.start();
        }




    }
}
