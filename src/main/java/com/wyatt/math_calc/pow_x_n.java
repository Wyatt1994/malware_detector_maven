package com.wyatt.math_calc;

import org.junit.Test;

/**
 计算x的n次方
 */
public class pow_x_n {
    public static void main(String[] args) {
        System.out.println(pow(2,-3));
    }

    public static double pow(double x,int n){

        //分为三种情况，n为正、负和0的情况，为正，分为奇偶数两种，为负就转为正数的情况，为0则直接返回1
        if (n==0) return 1;
        //若为负数次幂，则转换为1/x*(1/x)的-n-1次幂
        //为什么这样？主要目的是变为正数次幂的情况
        if (n<0) return 1/x*pow(1/x,-(n+1));
        //单独把能偶数次幂的提出来，是由于n/2的原因。
        //若为偶数，则直接为x平方*x的n/2次幂
        if (n%2==0) return pow(x*x,n/2);
        //若为奇数，则为本身x*偶数的幂运算
        else return pow(x*x,n/2)*x;
    }
}
